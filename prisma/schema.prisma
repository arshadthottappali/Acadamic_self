generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id           String   @id @default(cuid())
  ownerId      String
  name         String
  description  String? 
  subdomain    String   @unique
  customDomain String?  @unique
  pages        Page[]
  publications Publication[]
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Page {
  id        String  @id @default(cuid())
  siteId    String
  name      String
  slug      String
  html      String   @default("")
  css       String   @default("")
  js        String   @default("")
  data      Json?
  site      Site    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([siteId, slug])
}

model Publication {
  id        String  @id @default(cuid())
  siteId    String
  title     String
  authors   String
  year      Int?
  venue     String?
  doi       String?
  url       String?
  source    String? // orcid, manual, scholar
  orcid     String?
  bibtex    String?
  abstract  String?
  site      Site    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
